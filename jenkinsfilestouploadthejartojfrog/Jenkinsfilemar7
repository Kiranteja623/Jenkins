pipeline {
  agent { node { label 'ubuntu' } }
  stages {
      stage ('git') {
        steps {
          git url: 'https://github.com/spring-projects/spring-petclinic.git',
          branch: 'main'
      }
      }
      stage ('build') {
        steps {
          sh 'mvn clean package'
      }
    }
      stage ('jfrog') {
        steps {
          rtServer (
                    id: "JFROG_CLOUD",
                    url: 'https://kiranteja.jfrog.io/artifactory',
                    credentialsId: 'JFROG_CLOUD'
                )
                rtMavenDeployer (
                    id: "JFROG_CLOUD",
                    serverId: "JFROG_CLOUD_ADMIN",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )

                rtMavenResolver (
                    id: "JFROG_CLOUD",
                    serverId: "JFROG_CLOUD_ADMIN",
                    releaseRepo: 'libs-release',
                    snapshotRepo: 'libs-snapshot'
                )
        }
      }
      stage ('maven deploy') {
        steps {
                  sh "mvn clean install"
                  rtMavenRun (
                      tool: 'maven_3.6.3',
                      pom: 'pom.xml',
                      goals: 'clean install',
                      deployerId: "JFROG_CLOUD"
                  )
        }
      }
      stage('package') {
        steps {
                sh "mvn clean install"
                rtPublishBuildInfo (
                    serverId: "JFROG_CLOUD_ADMIN"
                )
          
            }
      }
        stage ('sonarqube') {
        steps {
          withSonarQubeEnv('Kiranteja623') {
                    sh 'mvn clean  package sonar:sonar -Dsonar.organization=kiranteja623 -Dsonar.login=ddfb007e5e67490bc157bd464d92bdfd2690f1d2 -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=kiranteja623/petclinic'
                }
        }
      }
    }
}